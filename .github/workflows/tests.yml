---
name: Tests
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - '*'  # This will trigger for PRs against any branch

defaults:
  run:
    shell: bash

jobs:
  cmake_tests:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    env:
      OMP_NUM_THREADS: ${{ matrix.config.omp_num_threads }}
      PYTHONPATH: ${{ github.workspace }}/tools/pylib
      OMPI_MCA_rmaps_base_oversubscribe: yes
      MPIRUN: mpiexec -np
      LD_LIBRARY_PATH: /home/runner/local/lib:$LD_LIBRARY_PATH
      BOUT_CONFIGURE_OPTIONS: ${{ matrix.config.configure_options }}
      BUILD_TYPE: ${{ matrix.build_type.cmake_build_type }}
      TEST_TYPE: ${{ matrix.build_type.test_type }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: "CMake default options"
            os: ubuntu-22.04
            configure_options: "-DPACKAGE_TESTS=OFF -DHERMES_ERROR_ON_WARNINGS=ON -DHERMES_COVERAGE=ON"
        build_type:
          - cmake_build_type: Debug
            test_type: unit
          - cmake_build_type: Release
            test_type: integration

    steps:
      - name: Job information
        run: |
          echo Build: ${{ matrix.config.name }}, ${{ matrix.config.os }}
          echo Configure options: ${{ matrix.config.configure_options }}
          echo Build type: ${{ matrix.build_type.cmake_build_type }}
          echo Tests to run: ${{ matrix.build_type.test_type }}

      - name: Install dependencies
        run: sudo apt update &&
             sudo apt install -y
                 libfftw3-dev
                 libnetcdf-dev
                 libnetcdf-c++4-dev
                 netcdf-bin
                 python3
                 python3-pip
                 python3-pytest
                 python3-numpy
                 python3-scipy
                 openmpi-bin
                 libopenmpi-dev
                 liblapack-dev
                 libparpack2-dev

      - uses: actions/checkout@v5
        with:
          submodules: true

      - name: Build
        run: cmake . -B build -DCMAKE_BUILD_TYPE=$BUILD_TYPE  $BOUT_CONFIGURE_OPTIONS &&
             cmake --build build -j4

      - name: Install pip packages
        run: |
          ./.pip_install_for_tests.sh 'netcdf4~=1.5' boutdata boututils
          # Add the pip install location to the runner's PATH
          echo ~/.local/bin >> $GITHUB_PATH
      - name: Run tests
        run: cd build &&
             ctest --output-on-failure --timeout 300 -L $TEST_TYPE
      - name: Upload test coverage data
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: ${{ matrix.build_type.test_type }}
